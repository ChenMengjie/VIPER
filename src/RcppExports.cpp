// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// calculate_weights
arma::vec calculate_weights(arma::vec z, arma::mat X);
RcppExport SEXP VIPER_calculate_weights(SEXP zSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_weights(z, X));
    return rcpp_result_gen;
END_RCPP
}
// fitting_lasso
Rcpp::List fitting_lasso(arma::vec y, arma::mat X, bool min, double alpha);
RcppExport SEXP VIPER_fitting_lasso(SEXP ySEXP, SEXP XSEXP, SEXP minSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(fitting_lasso(y, X, min, alpha));
    return rcpp_result_gen;
END_RCPP
}
// log_factorial
double log_factorial(int Y);
RcppExport SEXP VIPER_log_factorial(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(log_factorial(Y));
    return rcpp_result_gen;
END_RCPP
}
// log_factorial_calculated
arma::vec log_factorial_calculated(int N);
RcppExport SEXP VIPER_log_factorial_calculated(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(log_factorial_calculated(N));
    return rcpp_result_gen;
END_RCPP
}
// reweighting_sum_C
arma::vec reweighting_sum_C(arma::mat Ymat, arma::mat Yflagmat, arma::vec Y, arma::vec Yflag, arma::vec prior_weight, bool ImputeAll);
RcppExport SEXP VIPER_reweighting_sum_C(SEXP YmatSEXP, SEXP YflagmatSEXP, SEXP YSEXP, SEXP YflagSEXP, SEXP prior_weightSEXP, SEXP ImputeAllSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ymat(YmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yflagmat(YflagmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Yflag(YflagSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior_weight(prior_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type ImputeAll(ImputeAllSEXP);
    rcpp_result_gen = Rcpp::wrap(reweighting_sum_C(Ymat, Yflagmat, Y, Yflag, prior_weight, ImputeAll));
    return rcpp_result_gen;
END_RCPP
}
// reweighting_C
arma::vec reweighting_C(arma::mat Ymat, arma::mat Yflagmat, arma::vec Y, arma::vec Yflag);
RcppExport SEXP VIPER_reweighting_C(SEXP YmatSEXP, SEXP YflagmatSEXP, SEXP YSEXP, SEXP YflagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ymat(YmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yflagmat(YflagmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Yflag(YflagSEXP);
    rcpp_result_gen = Rcpp::wrap(reweighting_C(Ymat, Yflagmat, Y, Yflag));
    return rcpp_result_gen;
END_RCPP
}
// imputation_by_samples
Rcpp::List imputation_by_samples(arma::mat data, arma::mat selected_logxx, arma::mat logxx, arma::mat zero_matrix, int n, int p, bool minbool, double alpha);
RcppExport SEXP VIPER_imputation_by_samples(SEXP dataSEXP, SEXP selected_logxxSEXP, SEXP logxxSEXP, SEXP zero_matrixSEXP, SEXP nSEXP, SEXP pSEXP, SEXP minboolSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type selected_logxx(selected_logxxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logxx(logxxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type zero_matrix(zero_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type minbool(minboolSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(imputation_by_samples(data, selected_logxx, logxx, zero_matrix, n, p, minbool, alpha));
    return rcpp_result_gen;
END_RCPP
}
// replacing_by_expectation_C
arma::vec replacing_by_expectation_C(arma::mat Ymat, arma::mat Yflagmat, arma::vec Y, arma::vec Yflag, arma::mat Ymat_sub, arma::mat Yflagmat_sub, arma::vec prior_weight, bool ImputeAll);
RcppExport SEXP VIPER_replacing_by_expectation_C(SEXP YmatSEXP, SEXP YflagmatSEXP, SEXP YSEXP, SEXP YflagSEXP, SEXP Ymat_subSEXP, SEXP Yflagmat_subSEXP, SEXP prior_weightSEXP, SEXP ImputeAllSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ymat(YmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yflagmat(YflagmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Yflag(YflagSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ymat_sub(Ymat_subSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Yflagmat_sub(Yflagmat_subSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prior_weight(prior_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type ImputeAll(ImputeAllSEXP);
    rcpp_result_gen = Rcpp::wrap(replacing_by_expectation_C(Ymat, Yflagmat, Y, Yflag, Ymat_sub, Yflagmat_sub, prior_weight, ImputeAll));
    return rcpp_result_gen;
END_RCPP
}
// imputation_by_samples_expectation
Rcpp::List imputation_by_samples_expectation(arma::mat data, arma::mat selected_logxx, arma::mat logxx, arma::mat zero_matrix, int n, int p, bool minbool, double alpha);
RcppExport SEXP VIPER_imputation_by_samples_expectation(SEXP dataSEXP, SEXP selected_logxxSEXP, SEXP logxxSEXP, SEXP zero_matrixSEXP, SEXP nSEXP, SEXP pSEXP, SEXP minboolSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type selected_logxx(selected_logxxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logxx(logxxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type zero_matrix(zero_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type minbool(minboolSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(imputation_by_samples_expectation(data, selected_logxx, logxx, zero_matrix, n, p, minbool, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"VIPER_calculate_weights", (DL_FUNC) &VIPER_calculate_weights, 2},
    {"VIPER_fitting_lasso", (DL_FUNC) &VIPER_fitting_lasso, 4},
    {"VIPER_log_factorial", (DL_FUNC) &VIPER_log_factorial, 1},
    {"VIPER_log_factorial_calculated", (DL_FUNC) &VIPER_log_factorial_calculated, 1},
    {"VIPER_reweighting_sum_C", (DL_FUNC) &VIPER_reweighting_sum_C, 6},
    {"VIPER_reweighting_C", (DL_FUNC) &VIPER_reweighting_C, 4},
    {"VIPER_imputation_by_samples", (DL_FUNC) &VIPER_imputation_by_samples, 8},
    {"VIPER_replacing_by_expectation_C", (DL_FUNC) &VIPER_replacing_by_expectation_C, 8},
    {"VIPER_imputation_by_samples_expectation", (DL_FUNC) &VIPER_imputation_by_samples_expectation, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_VIPER(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
